// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace Microsoft.Azure.TypeEdge.Host.Service
{
    /// <summary>
    ///     Class to produce the template output
    /// </summary>
#line 1 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Service : ServiceBase
    {
        /// <summary>
        ///     Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write("\r\nusing Microsoft.Azure.TypeEdge.Attributes;\r\nusing Microsoft.Azure.TypeEdge.Modu" +
                  "les.Endpoints;\r\nusing Microsoft.Azure.TypeEdge.Twins;\r\n \r\nnamespace ");

#line 11 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
            Write(ToStringHelper.ToStringWithCulture(_codeGeneratorSettings.Namespace));

#line default
#line hidden
            Write("\r\n{\r\n    [TypeModule]\r\n    public interface I");

#line 14 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
            Write(ToStringHelper.ToStringWithCulture(_serviceDescription.Name));

#line default
#line hidden
            Write(" \r\n    {\r\n    ");

#line 16 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
            if (_serviceDescription.InputDescriptions != null)
                foreach (var endpoint in _serviceDescription.InputDescriptions)
                {
#line default
#line hidden
                    Write("        Input<");

#line 20 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(endpoint.TypeDescription.Name));

#line default
#line hidden
                    Write("> ");

#line 20 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(endpoint.Name));

#line default
#line hidden
                    Write(" { get; set; }\r\n\t");

#line 21 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                }


#line default
#line hidden
            Write("\r\n\t");

#line 25 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
            if (_serviceDescription.OutputDescriptions != null)
                foreach (var endpoint in _serviceDescription.OutputDescriptions)
                {
#line default
#line hidden
                    Write("        Output<");

#line 29 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(endpoint.TypeDescription.Name));

#line default
#line hidden
                    Write("> ");

#line 29 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(endpoint.Name));

#line default
#line hidden
                    Write(" { get; set; }\r\n\t");

#line 30 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                }


#line default
#line hidden
            Write("\r\n\t");

#line 34 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
            if (_serviceDescription.TwinDescriptions != null)
                foreach (var twin in _serviceDescription.TwinDescriptions)
                {
#line default
#line hidden
                    Write("        ModuleTwin<");

#line 38 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(twin.TypeDescription.Name));

#line default
#line hidden
                    Write("> ");

#line 38 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(twin.Name));

#line default
#line hidden
                    Write(" { get; set; }\r\n\t");

#line 39 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                }


#line default
#line hidden
            Write("\r\n\r\n\t");

#line 44 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
            if (_serviceDescription.DirectMethodDescriptions != null)
                foreach (var method in _serviceDescription.DirectMethodDescriptions)
                {
                    var returnType = "void";
                    var arguments = "";
                    if (method.ReturnTypeDescription != null)
                        returnType = method.ReturnTypeDescription.Name;
                    if (method.ArgumentsTypeDescription != null)
                        arguments = string.Join(",",
                            method.ArgumentsTypeDescription.Select(e => $"{e.TypeDescription.Name} {e.Name}")
                                .ToArray());


#line default
#line hidden
                    Write("        ");

#line 54 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(returnType));

#line default
#line hidden
                    Write(" ");

#line 54 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(method.Name));

#line default
#line hidden
                    Write("(");

#line 54 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                    Write(ToStringHelper.ToStringWithCulture(arguments));

#line default
#line hidden
                    Write(");\r\n\t");

#line 55 "C:\work\oss\me\TypeEdge\Microsoft.Azure.TypeEdge.Host\Service\Service.tt"
                }


#line default
#line hidden
            Write("\r\n    }\r\n}");
            return GenerationEnvironment.ToString();
        }
    }

#line default
#line hidden

    #region Base class

    /// <summary>
    ///     Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ServiceBase
    {
        #region Fields

        private StringBuilder generationEnvironmentField;
        private CompilerErrorCollection errorsField;
        private List<int> indentLengthsField;
        private bool endsWithNewline;

        #endregion

        #region Properties

        /// <summary>
        ///     The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if (generationEnvironmentField == null) generationEnvironmentField = new StringBuilder();
                return generationEnvironmentField;
            }
            set => generationEnvironmentField = value;
        }

        /// <summary>
        ///     The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if (errorsField == null) errorsField = new CompilerErrorCollection();
                return errorsField;
            }
        }

        /// <summary>
        ///     A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> indentLengths
        {
            get
            {
                if (indentLengthsField == null) indentLengthsField = new List<int>();
                return indentLengthsField;
            }
        }

        /// <summary>
        ///     Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent { get; private set; } = "";

        /// <summary>
        ///     Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session { get; set; }

        #endregion

        #region Transform-time helpers

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend)) return;
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (GenerationEnvironment.Length == 0
                || endsWithNewline)
            {
                GenerationEnvironment.Append(CurrentIndent);
                endsWithNewline = false;
            }

            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine, StringComparison.CurrentCulture)) endsWithNewline = true;
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if (CurrentIndent.Length == 0)
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }

            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine, Environment.NewLine + CurrentIndent);
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (endsWithNewline)
                GenerationEnvironment.Append(textToAppend, 0, textToAppend.Length - CurrentIndent.Length);
            else
                GenerationEnvironment.Append(textToAppend);
        }

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            endsWithNewline = true;
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }

        /// <summary>
        ///     Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }

        /// <summary>
        ///     Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if (indent == null) throw new ArgumentNullException("indent");
            CurrentIndent = CurrentIndent + indent;
            indentLengths.Add(indent.Length);
        }

        /// <summary>
        ///     Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            var returnValue = "";
            if (indentLengths.Count > 0)
            {
                var indentLength = indentLengths[indentLengths.Count - 1];
                indentLengths.RemoveAt(indentLengths.Count - 1);
                if (indentLength > 0)
                {
                    returnValue = CurrentIndent.Substring(CurrentIndent.Length - indentLength);
                    CurrentIndent = CurrentIndent.Remove(CurrentIndent.Length - indentLength);
                }
            }

            return returnValue;
        }

        /// <summary>
        ///     Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            indentLengths.Clear();
            CurrentIndent = "";
        }

        #endregion

        #region ToString Helpers

        /// <summary>
        ///     Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider formatProviderField = CultureInfo.InvariantCulture;

            /// <summary>
            ///     Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get => formatProviderField;
                set
                {
                    if (value != null) formatProviderField = value;
                }
            }

            /// <summary>
            ///     This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null) throw new ArgumentNullException("objectToConvert");
                var t = objectToConvert.GetType();
                var method = t.GetMethod("ToString", new[]
                {
                    typeof(IFormatProvider)
                });
                if (method == null)
                    return objectToConvert.ToString();
                return (string) method.Invoke(objectToConvert, new object[]
                {
                    formatProviderField
                });
            }
        }

        /// <summary>
        ///     Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper { get; } = new ToStringInstanceHelper();

        #endregion
    }

    #endregion
}